rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAdmin() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if true;  // Anyone can read user profiles
      allow create: if isAuthenticated() && (
        request.resource.data.userType == 'user' || 
        request.resource.data.userType == 'artist'
      );
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();

      // Additional validation for artist status
      function isValidUserData() {
        let data = request.resource.data;
        return data.userType == 'artist' ? (
          data.status == 'pending' || // New artists start as pending
          (data.status == 'approved' && isAdmin()) // Only admins can approve artists
        ) : true; // Regular users don't need status validation
      }
    }
    
    // Artists collection
    match /artists/{artistId} {
      allow read: if true;
      allow write: if isAuthenticated() && (
        request.auth.uid == artistId || 
        isAdmin()
      );
    }
    
    // Events collection
    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    // Gallery images collection
    match /gallery_images/{imageId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
                   request.resource.data.artistId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
                           get(/databases/$(database)/documents/gallery_images/$(imageId)).data.artistId == request.auth.uid;
    }

    // Cart collection
    match /carts/{userId} {
      allow read: if true;
      allow create, update: if isOwner(userId) && 
                           request.resource.data.userId == userId;
      allow delete: if isOwner(userId);
    }

    // Artworks collection
    match /artworks/{artworkId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
                   request.resource.data.artistId == request.auth.uid;
      allow update: if isAuthenticated() && (
        get(/databases/$(database)/documents/artworks/$(artworkId)).data.artistId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        get(/databases/$(database)/documents/artworks/$(artworkId)).data.artistId == request.auth.uid ||
        isAdmin()
      );
    }

    // Achievements collection
    match /achievements/{achievementId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
                   get(/databases/$(database)/documents/achievements/$(achievementId)).data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                   get(/databases/$(database)/documents/achievements/$(achievementId)).data.userId == request.auth.uid;
    }

    // Timeline events collection
    match /timelineEvents/{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}

// Storage rules
service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read;
      allow write: if request.auth != null 
                  && request.resource.size < 5 * 1024 * 1024
                  && request.resource.contentType.matches('image/.*');
    }
  }
}